; Generated by Astrid Pure Stack-Centric Compiler
; Architecture: Nova-16 with pure stack-first approach
; Variables stored on stack, minimal register usage
; Stack Layout: [locals][FP][return_addr][params]

main:
    MOV SP, 0xF000                ; Initialize stack pointer to safe area
    MOV FP, SP                    ; Initialize frame pointer for main
    SUB SP, 122      ; Allocate 122 bytes for locals
    ; Generate random number (0-65535)
RND P0
    MOV P1, FP                ; Load base pointer
    SUB P1, 4              ; Subtract for negative offset (-4)
    MOV [P1], P0                  ; Store return value to v0
    MOV P0, FP                ; Load base pointer
    SUB P0, 4              ; Subtract for negative offset (-4)
    MOV P2, [P0]                  ; Load from v0 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 6              ; Subtract for negative offset (-6)
    MOV [P1], P2                  ; Store to v1 (16-bit)
    MOV P0, FP                ; Load base pointer
    SUB P0, 28              ; Subtract for negative offset (-28)
    MOV R0, 1         ; Load constant 1
    MOV [P0], R0                  ; Store to local variable v2
    MOV P0, FP                ; Load base pointer
    SUB P0, 50              ; Subtract for negative offset (-50)
    MOV R0, 6         ; Load constant 6
    MOV [P0], R0                  ; Store to local variable v3

; Generate random number between 1 and 6 (8-bit)
RNDR P0, 1, 6
    MOV P1, FP                ; Load base pointer
    SUB P1, 72              ; Subtract for negative offset (-72)
    MOV [P1], P0                  ; Store return value to v4
    MOV P0, FP                ; Load base pointer
    SUB P0, 72              ; Subtract for negative offset (-72)
    MOV P2, [P0]                  ; Load from v4 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 94              ; Subtract for negative offset (-94)
    MOV [P1], P2                  ; Store to v5 (16-bit)
    MOV P0, FP                ; Load base pointer
    SUB P0, 116              ; Subtract for negative offset (-116)
    MOV R0, 0         ; Load constant 0
    MOV [P0], R0                  ; Store to local variable v6
    MOV P0, FP                ; Load base pointer
    SUB P0, 118              ; Subtract for negative offset (-118)
    MOV R0, 100         ; Load constant 100
    MOV [P0], R0                  ; Store to local variable v7

; Generate random number between 0 and 100 (8-bit)
RNDR P0, 0, 100
    MOV P1, FP                ; Load base pointer
    SUB P1, 120              ; Subtract for negative offset (-120)
    MOV [P1], P0                  ; Store return value to v8
    MOV P0, FP                ; Load base pointer
    SUB P0, 120              ; Subtract for negative offset (-120)
    MOV P2, [P0]                  ; Load from v8 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 122              ; Subtract for negative offset (-122)
    MOV [P1], P2                  ; Store to v9 (16-bit)
    MOV P0, FP                ; Load base pointer
    SUB P0, 8              ; Subtract for negative offset (-8)
    MOV P1, 32767         ; Load 16-bit constant 32767
    MOV [P0], P1                  ; Store to local variable v10

; Generate random number between 0 and 32767 (16-bit)
RNDR P0, 0, 32767
    MOV P1, FP                ; Load base pointer
    SUB P1, 10              ; Subtract for negative offset (-10)
    MOV [P1], P0                  ; Store return value to v11
    MOV P0, FP                ; Load base pointer
    SUB P0, 10              ; Subtract for negative offset (-10)
    MOV P2, [P0]                  ; Load from v11 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 12              ; Subtract for negative offset (-12)
    MOV [P1], P2                  ; Store to v12 (16-bit)
    MOV P0, FP                ; Load base pointer
    SUB P0, 14              ; Subtract for negative offset (-14)
    MOV P1, 512         ; Load 16-bit constant 512
    MOV [P0], P1                  ; Store to local variable v13

; Generate random number between 0 and 512 (16-bit)
RNDR P0, 0, 512
    MOV P1, FP                ; Load base pointer
    SUB P1, 16              ; Subtract for negative offset (-16)
    MOV [P1], P0                  ; Store return value to v14
    MOV P0, FP                ; Load base pointer
    SUB P0, 16              ; Subtract for negative offset (-16)
    MOV P2, [P0]                  ; Load from v14 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 18              ; Subtract for negative offset (-18)
    MOV [P1], P2                  ; Store to v15 (16-bit)
    MOV P0, FP                ; Load base pointer
    SUB P0, 20              ; Subtract for negative offset (-20)
    MOV R0, 10         ; Load constant 10
    MOV [P0], R0                  ; Store to local variable v16
    MOV P0, FP                ; Load base pointer
    SUB P0, 20              ; Subtract for negative offset (-20)
    MOV P2, [P0]                  ; Load from v16 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 22              ; Subtract for negative offset (-22)
    MOV [P1], P2                  ; Store to v17 (16-bit)
    MOV P0, FP                ; Load base pointer
    SUB P0, 24              ; Subtract for negative offset (-24)
    MOV R0, 50         ; Load constant 50
    MOV [P0], R0                  ; Store to local variable v18
    MOV P0, FP                ; Load base pointer
    SUB P0, 24              ; Subtract for negative offset (-24)
    MOV P2, [P0]                  ; Load from v18 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 26              ; Subtract for negative offset (-26)
    MOV [P1], P2                  ; Store to v19 (16-bit)
    ; Generate random number with variable parameters
    MOV P0, FP                ; Load base pointer
    SUB P0, 22              ; Subtract for negative offset (-22)
    MOV P6, [P0]                  ; Load min from v17
    MOV P1, FP                ; Load base pointer
    SUB P1, 26              ; Subtract for negative offset (-26)
    MOV P7, [P1]                  ; Load max from v19
    RNDR P0, P6, P7               ; Generate random between variables
    MOV P1, FP                ; Load base pointer
    SUB P1, 30              ; Subtract for negative offset (-30)
    MOV [P1], P0                  ; Store return value to v20
    MOV P0, FP                ; Load base pointer
    SUB P0, 30              ; Subtract for negative offset (-30)
    MOV P2, [P0]                  ; Load from v20 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 32              ; Subtract for negative offset (-32)
    MOV [P1], P2                  ; Store to v21 (16-bit)

; Generate random number between 0 and 10 (8-bit)
RNDR P0, 0, 10
    MOV P1, FP                ; Load base pointer
    SUB P1, 34              ; Subtract for negative offset (-34)
    MOV [P1], P0                  ; Store return value to v22
    MOV P0, FP                ; Load base pointer
    SUB P0, 36              ; Subtract for negative offset (-36)
    MOV R0, 20         ; Load constant 20
    MOV [P0], R0                  ; Store to local variable v23
    MOV P0, FP                ; Load base pointer
    SUB P0, 38              ; Subtract for negative offset (-38)
    MOV R0, 30         ; Load constant 30
    MOV [P0], R0                  ; Store to local variable v24

; Generate random number between 20 and 30 (8-bit)
RNDR P0, 20, 30
    MOV P1, FP                ; Load base pointer
    SUB P1, 40              ; Subtract for negative offset (-40)
    MOV [P1], P0                  ; Store return value to v25
    MOV P0, FP                ; Load base pointer
    SUB P0, 34              ; Subtract for negative offset (-34)
    MOV R0, [P0]                  ; Load left operand v22
    MOV P1, FP                ; Load base pointer
    SUB P1, 40              ; Subtract for negative offset (-40)
    MOV R1, [P1]                  ; Load right operand v25
    ADD R0, R1               ; + operands
    MOV P0, FP                ; Load base pointer
    SUB P0, 42              ; Subtract for negative offset (-42)
    MOV [P0], R0                  ; Store result to v26
    MOV P0, FP                ; Load base pointer
    SUB P0, 42              ; Subtract for negative offset (-42)
    MOV P2, [P0]                  ; Load from v26 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 44              ; Subtract for negative offset (-44)
    MOV [P1], P2                  ; Store to v27 (16-bit)
    MOV P0, FP                ; Load base pointer
    SUB P0, 46              ; Subtract for negative offset (-46)
    MOV R0, 255         ; Load constant 255
    MOV [P0], R0                  ; Store to local variable v28

; Generate random number between 0 and 255 (8-bit)
RNDR P0, 0, 255
    MOV P1, FP                ; Load base pointer
    SUB P1, 48              ; Subtract for negative offset (-48)
    MOV [P1], P0                  ; Store return value to v29
    MOV P0, FP                ; Load base pointer
    SUB P0, 52              ; Subtract for negative offset (-52)
    MOV R0, 191         ; Load constant 191
    MOV [P0], R0                  ; Store to local variable v30

; Generate random number between 0 and 191 (8-bit)
RNDR P0, 0, 191
    MOV P1, FP                ; Load base pointer
    SUB P1, 54              ; Subtract for negative offset (-54)
    MOV [P1], P0                  ; Store return value to v31
    MOV P0, FP                ; Load base pointer
    SUB P0, 56              ; Subtract for negative offset (-56)
    MOV R0, 31         ; Load constant 31
    MOV [P0], R0                  ; Store to local variable v32

; Generate random number between 1 and 31 (8-bit)
RNDR P0, 1, 31
    MOV P1, FP                ; Load base pointer
    SUB P1, 58              ; Subtract for negative offset (-58)
    MOV [P1], P0                  ; Store return value to v33
    MOV P0, FP                ; Load base pointer
    SUB P0, 48              ; Subtract for negative offset (-48)
    MOV R0, [P0]                  ; Load X from v29
    MOV VX, R0                    ; Set X coordinate
    MOV P0, FP                ; Load base pointer
    SUB P0, 54              ; Subtract for negative offset (-54)
    MOV R0, [P0]                  ; Load Y from v31
    MOV VY, R0                    ; Set Y coordinate
    MOV P0, FP                ; Load base pointer
    SUB P0, 58              ; Subtract for negative offset (-58)
    MOV R0, [P0]                  ; Load color from v33
    MOV VM, 0                     ; Set coordinate mode
    SWRITE R0                     ; Write pixel
    MOV P0, FP                ; Load base pointer
    SUB P0, 60              ; Subtract for negative offset (-60)
    MOV [P0], R0                  ; Store return value to v34
    MOV P0, FP                ; Load base pointer
    SUB P0, 116              ; Subtract for negative offset (-116)
    MOV P2, [P0]                  ; Load from v6 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 62              ; Subtract for negative offset (-62)
    MOV [P1], P2                  ; Store to v35 (16-bit)
    JMP for_header_0                  ; Unconditional jump
for_header_0:
    MOV P0, FP                ; Load base pointer
    SUB P0, 64              ; Subtract for negative offset (-64)
    MOV R0, 5         ; Load constant 5
    MOV [P0], R0                  ; Store to local variable v36
    MOV P1, FP                ; Load base pointer
    SUB P1, 62              ; Subtract for negative offset (-62)
    MOV P0, [P1]                 ; Load left operand v35 as 16-bit
    MOV P2, FP                ; Load base pointer
    SUB P2, 64              ; Subtract for negative offset (-64)
    MOV P1, [P2]                  ; Load right operand v36 as 16-bit
    CMP P0, P1                    ; Compare 16-bit operands
    JLT cmp_true_1     ; Jump if condition true
    MOV R0, 0                     ; Set false result
    JMP cmp_end_2        ; Skip true case
cmp_true_1:
    MOV R0, 1                     ; Set true result
cmp_end_2:
    MOV P0, FP                ; Load base pointer
    SUB P0, 66              ; Subtract for negative offset (-66)
    MOV [P0], R0                  ; Store comparison result to v37
    MOV P0, FP                ; Load base pointer
    SUB P0, 66              ; Subtract for negative offset (-66)
    MOV R0, [P0]                  ; Load condition v37
    CMP R0, 0                     ; Test condition
    JNZ for_body_1             ; Jump to true branch if non-zero
    JMP for_exit_2            ; Jump to false branch
for_body_1:

; Generate random number between 0 and 100 (8-bit)
RNDR P0, 0, 100
    MOV P1, FP                ; Load base pointer
    SUB P1, 68              ; Subtract for negative offset (-68)
    MOV [P1], P0                  ; Store return value to v38
    MOV P0, FP                ; Load base pointer
    SUB P0, 68              ; Subtract for negative offset (-68)
    MOV P2, [P0]                  ; Load from v38 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 70              ; Subtract for negative offset (-70)
    MOV [P1], P2                  ; Store to v39 (16-bit)
    MOV P0, FP                ; Load base pointer
    SUB P0, 62              ; Subtract for negative offset (-62)
    MOV R0, [P0]                  ; Load left operand v35
    MOV P1, FP                ; Load base pointer
    SUB P1, 20              ; Subtract for negative offset (-20)
    MOV R1, [P1]                  ; Load right operand v16
    MUL R0, R1               ; * operands
    MOV P0, FP                ; Load base pointer
    SUB P0, 74              ; Subtract for negative offset (-74)
    MOV [P0], R0                  ; Store result to v40
    MOV P0, FP                ; Load base pointer
    SUB P0, 76              ; Subtract for negative offset (-76)
    MOV R0, 2         ; Load constant 2
    MOV [P0], R0                  ; Store to local variable v41
    MOV P0, FP                ; Load base pointer
    SUB P0, 70              ; Subtract for negative offset (-70)
    MOV R0, [P0]                  ; Load left operand v39
    MOV P1, FP                ; Load base pointer
    SUB P1, 76              ; Subtract for negative offset (-76)
    MOV R1, [P1]                  ; Load right operand v41
    DIV R0, R1               ; / operands
    MOV P0, FP                ; Load base pointer
    SUB P0, 78              ; Subtract for negative offset (-78)
    MOV [P0], R0                  ; Store result to v42
    MOV P0, FP                ; Load base pointer
    SUB P0, 80              ; Subtract for negative offset (-80)
    MOV R0, 15         ; Load constant 15
    MOV [P0], R0                  ; Store to local variable v43

; Generate random number between 1 and 15 (8-bit)
RNDR P0, 1, 15
    MOV P1, FP                ; Load base pointer
    SUB P1, 82              ; Subtract for negative offset (-82)
    MOV [P1], P0                  ; Store return value to v44
    MOV P0, FP                ; Load base pointer
    SUB P0, 74              ; Subtract for negative offset (-74)
    MOV R0, [P0]                  ; Load X from v40
    MOV VX, R0                    ; Set X coordinate
    MOV P0, FP                ; Load base pointer
    SUB P0, 78              ; Subtract for negative offset (-78)
    MOV R0, [P0]                  ; Load Y from v42
    MOV VY, R0                    ; Set Y coordinate
    MOV P0, FP                ; Load base pointer
    SUB P0, 82              ; Subtract for negative offset (-82)
    MOV R0, [P0]                  ; Load color from v44
    MOV VM, 0                     ; Set coordinate mode
    SWRITE R0                     ; Write pixel
    MOV P0, FP                ; Load base pointer
    SUB P0, 84              ; Subtract for negative offset (-84)
    MOV [P0], R0                  ; Store return value to v45
    JMP for_increment_3                  ; Unconditional jump
for_increment_3:
    MOV P0, FP                ; Load base pointer
    SUB P0, 62              ; Subtract for negative offset (-62)
    MOV P1, [P0]                  ; Load current 16-bit value of v35
    ADD P1, 1                     ; Increment 16-bit
    MOV [P0], P1                  ; Store 16-bit result back to v35
    JMP for_header_0                  ; Unconditional jump
for_exit_2:

; Generate random number between 0 and 255 (8-bit)
RNDR P0, 0, 255
    MOV P1, FP                ; Load base pointer
    SUB P1, 86              ; Subtract for negative offset (-86)
    MOV [P1], P0                  ; Store return value to v46
    MOV P0, FP                ; Load base pointer
    SUB P0, 86              ; Subtract for negative offset (-86)
    MOV P2, [P0]                  ; Load from v46 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 88              ; Subtract for negative offset (-88)
    MOV [P1], P2                  ; Store to v47 (16-bit)
    MOV P0, FP                ; Load base pointer
    SUB P0, 90              ; Subtract for negative offset (-90)
    MOV P1, 256         ; Load 16-bit constant 256
    MOV [P0], P1                  ; Store to local variable v48

; Generate random number between 0 and 256 (16-bit)
RNDR P0, 0, 256
    MOV P1, FP                ; Load base pointer
    SUB P1, 92              ; Subtract for negative offset (-92)
    MOV [P1], P0                  ; Store return value to v49
    MOV P0, FP                ; Load base pointer
    SUB P0, 92              ; Subtract for negative offset (-92)
    MOV P2, [P0]                  ; Load from v49 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 96              ; Subtract for negative offset (-96)
    MOV [P1], P2                  ; Store to v50 (16-bit)
    MOV P0, FP                ; Load base pointer
    SUB P0, 98              ; Subtract for negative offset (-98)
    MOV R0, 254         ; Load constant 254
    MOV [P0], R0                  ; Store to local variable v51

; Generate random number between 254 and 256 (16-bit)
RNDR P0, 254, 256
    MOV P1, FP                ; Load base pointer
    SUB P1, 100              ; Subtract for negative offset (-100)
    MOV [P1], P0                  ; Store return value to v52
    MOV P0, FP                ; Load base pointer
    SUB P0, 100              ; Subtract for negative offset (-100)
    MOV P2, [P0]                  ; Load from v52 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 102              ; Subtract for negative offset (-102)
    MOV [P1], P2                  ; Store to v53 (16-bit)

; Generate random number between 0 and 1 (8-bit)
RNDR P0, 0, 1
    MOV P1, FP                ; Load base pointer
    SUB P1, 104              ; Subtract for negative offset (-104)
    MOV [P1], P0                  ; Store return value to v54
    MOV P0, FP                ; Load base pointer
    SUB P0, 104              ; Subtract for negative offset (-104)
    MOV P2, [P0]                  ; Load from v54 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 106              ; Subtract for negative offset (-106)
    MOV [P1], P2                  ; Store to v55 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 106              ; Subtract for negative offset (-106)
    MOV P0, [P1]                 ; Load left operand v55 as 16-bit
    MOV P2, FP                ; Load base pointer
    SUB P2, 28              ; Subtract for negative offset (-28)
    MOV P1, [P2]                  ; Load right operand v2 as 16-bit
    CMP P0, P1                    ; Compare 16-bit operands
    JZ cmp_true_3     ; Jump if condition true
    MOV R0, 0                     ; Set false result
    JMP cmp_end_4        ; Skip true case
cmp_true_3:
    MOV R0, 1                     ; Set true result
cmp_end_4:
    MOV P0, FP                ; Load base pointer
    SUB P0, 108              ; Subtract for negative offset (-108)
    MOV [P0], R0                  ; Store comparison result to v56
    MOV P0, FP                ; Load base pointer
    SUB P0, 108              ; Subtract for negative offset (-108)
    MOV R0, [P0]                  ; Load condition v56
    CMP R0, 0                     ; Test condition
    JNZ if_then_4             ; Jump to true branch if non-zero
    JMP if_else_5            ; Jump to false branch
if_then_4:
    MOV VX, 100             ; Set X coordinate
    MOV VY, 100             ; Set Y coordinate
    MOV R0, 31         ; Load color constant
    MOV VM, 0                     ; Set coordinate mode
    SWRITE R0                     ; Write pixel
    MOV P0, FP                ; Load base pointer
    SUB P0, 110              ; Subtract for negative offset (-110)
    MOV [P0], R0                  ; Store return value to v57
    JMP if_merge_6                  ; Unconditional jump
if_else_5:
    MOV VX, 100             ; Set X coordinate
    MOV VY, 100             ; Set Y coordinate
    MOV R0, 0         ; Load color constant
    MOV VM, 0                     ; Set coordinate mode
    SWRITE R0                     ; Write pixel
    MOV P0, FP                ; Load base pointer
    SUB P0, 112              ; Subtract for negative offset (-112)
    MOV [P0], R0                  ; Store return value to v58
    JMP if_merge_6                  ; Unconditional jump
if_merge_6:
    HLT                           ; Halt system
    ; Halt processor
    MOV SP, FP                    ; Restore stack pointer
    HLT                           ; Halt system
