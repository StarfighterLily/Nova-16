; Generated by Astrid Pure Stack-Centric Compiler
; Architecture: Nova-16 with pure stack-first approach
; Variables stored on stack, minimal register usage
; Stack Layout: [locals][FP][return_addr][params]

main:
    MOV SP, 0xF000                ; Initialize stack pointer to safe area
    MOV FP, SP                    ; Initialize frame pointer for main
    SUB SP, 22      ; Allocate 22 bytes for locals
    MOV P0, FP                ; Load base pointer
    SUB P0, 4              ; Subtract for negative offset (-4)
    MOV R0, 0         ; Load constant 0
    MOV [P0], R0                  ; Store to local variable v0
    MOV P0, FP                ; Load base pointer
    SUB P0, 6              ; Subtract for negative offset (-6)
    MOV P1, 256         ; Load 16-bit constant 256
    MOV [P0], P1                  ; Store to local variable v1
    ; TODO: Implement system function random_range
    MOV P0, FP                ; Load base pointer
    SUB P0, 8              ; Subtract for negative offset (-8)
    MOV P2, [P0]                  ; Load from v2 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 10              ; Subtract for negative offset (-10)
    MOV [P1], P2                  ; Store to v3 (16-bit)
    ; TODO: Implement system function random_range
    MOV P0, FP                ; Load base pointer
    SUB P0, 12              ; Subtract for negative offset (-12)
    MOV P2, [P0]                  ; Load from v4 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 14              ; Subtract for negative offset (-14)
    MOV [P1], P2                  ; Store to v5 (16-bit)
    MOV P0, FP                ; Load base pointer
    SUB P0, 16              ; Subtract for negative offset (-16)
    MOV R0, 15         ; Load constant 15
    MOV [P0], R0                  ; Store to local variable v6
    ; TODO: Implement system function random_range
    MOV P0, FP                ; Load base pointer
    SUB P0, 18              ; Subtract for negative offset (-18)
    MOV P2, [P0]                  ; Load from v7 (16-bit)
    MOV P1, FP                ; Load base pointer
    SUB P1, 20              ; Subtract for negative offset (-20)
    MOV [P1], P2                  ; Store to v8 (16-bit)
    MOV P0, FP                ; Load base pointer
    SUB P0, 10              ; Subtract for negative offset (-10)
    MOV R0, [P0]                  ; Load X from v3
    MOV VX, R0                    ; Set X coordinate
    MOV P0, FP                ; Load base pointer
    SUB P0, 14              ; Subtract for negative offset (-14)
    MOV R0, [P0]                  ; Load Y from v5
    MOV VY, R0                    ; Set Y coordinate
    MOV P0, FP                ; Load base pointer
    SUB P0, 20              ; Subtract for negative offset (-20)
    MOV R0, [P0]                  ; Load color from v8
    MOV VM, 0                     ; Set coordinate mode
    SWRITE R0                     ; Write pixel
    MOV P0, FP                ; Load base pointer
    SUB P0, 22              ; Subtract for negative offset (-22)
    MOV [P0], R0                  ; Store return value to v9
    ; Halt processor
    MOV SP, FP                    ; Restore stack pointer
    HLT                           ; Halt system
