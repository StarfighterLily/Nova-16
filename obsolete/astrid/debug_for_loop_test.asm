; Generated by Astrid Pure Stack-Centric Compiler
; Architecture: Nova-16 with pure stack-first approach
; Variables stored on stack, minimal register usage
; Stack Layout: [locals][FP][return_addr][params]

main:
    MOV SP, 0xF000                ; Initialize stack pointer to safe area
    MOV FP, SP                    ; Initialize frame pointer for main
    SUB SP, 12      ; Allocate 12 bytes for locals
    MOV P1, 0         ; Load constant 0
    MOV [FP-4], P1      ; Direct indexed access
    MOV P2, [FP-4]             ; Load from v0 (16-bit)
    MOV [FP-6], P2      ; Direct indexed access
    MOV P2, [FP-4]             ; Load from v0 (16-bit)
    MOV [FP-8], P2      ; Direct indexed access
    MOV P2, [FP-4]             ; Load from v0 (16-bit)
    MOV [FP-6], P2      ; Direct indexed access
    JMP for_header_0                  ; Unconditional jump
for_header_0:
    MOV P1, 10         ; Load constant 10
    MOV [FP-10], P1      ; Direct indexed access
    MOV P0, [FP-6]          ; Load left operand v1 as 16-bit
    MOV P1, [FP-10]          ; Load right operand v3 as 16-bit
    CMP P0, P1                    ; Compare 16-bit operands
    JLT cmp_true_1     ; Jump if condition true
    MOV R0, 0                     ; Set false result
    JMP cmp_end_2        ; Skip true case
cmp_true_1:
    MOV R0, 1                     ; Set true result
cmp_end_2:
    MOV [FP-12], R0      ; Direct indexed access
    MOV R0, [FP-12]           ; Load condition v4
    CMP R0, 0                     ; Test condition
    JNZ for_body_1             ; Jump to true branch if non-zero
    JMP for_exit_2            ; Jump to false branch
for_body_1:
    MOV P2, [FP-6]             ; Load from v1 (16-bit)
    MOV [FP-8], P2      ; Direct indexed access
    JMP for_increment_3                  ; Unconditional jump
for_increment_3:
    MOV P1, [FP-6]            ; Load current 16-bit value of v1
    ADD P1, 1                     ; Increment 16-bit
    MOV [FP-6], P1      ; Direct indexed access
    JMP for_header_0                  ; Unconditional jump
for_exit_2:
    ; Halt processor
    MOV SP, FP                    ; Restore stack pointer
    HLT                           ; Halt system
