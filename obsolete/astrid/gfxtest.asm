; Generated by Astrid Pure Stack-Centric Compiler
; Architecture: Nova-16 with pure stack-first approach
; Variables stored on stack, minimal register usage
; Stack Layout: [locals][FP][return_addr][params]

main:
    MOV SP, 0xF000                ; Initialize stack pointer to safe area
    MOV FP, SP                    ; Initialize frame pointer for main
    SUB SP, 48      ; Allocate 48 bytes for locals
    MOV P1, 0         ; Load constant 0
    MOV [FP-4], P1      ; Direct indexed access
    MOV P2, [FP-4]             ; Load from v0 (16-bit)
    MOV [FP-6], P2      ; Direct indexed access
    MOV P2, [FP-4]             ; Load from v0 (16-bit)
    MOV [FP-28], P2      ; Direct indexed access
    MOV P2, [FP-4]             ; Load from v0 (16-bit)
    MOV [FP-36], P2      ; Direct indexed access
    MOV P2, [FP-4]             ; Load from v0 (16-bit)
    MOV [FP-38], P2      ; Direct indexed access
    MOV P1, str_1        ; Load string address 'De Nova Stella'
    MOV [FP-40], P1      ; Direct indexed access
    MOV P2, [FP-40]             ; Load from v5 (16-bit)
    MOV [FP-42], P2      ; Direct indexed access
    MOV P1, 1         ; Load constant 1
    MOV [FP-44], P1      ; Direct indexed access
    MOV VL, 1         ; Set active layer
    MOV [FP-46], R0      ; Direct indexed access
    MOV P2, [FP-4]             ; Load from v0 (16-bit)
    MOV [FP-28], P2      ; Direct indexed access
    JMP for_header_0                  ; Unconditional jump
for_header_0:
    MOV P1, 256         ; Load constant 256
    MOV [FP-48], P1      ; Direct indexed access
    MOV P0, [FP-28]          ; Load left operand v2 as 16-bit
    MOV P1, [FP-48]          ; Load right operand v9 as 16-bit
    CMP P0, P1                    ; Compare 16-bit operands
    JLT cmp_true_1     ; Jump if condition true
    MOV R0, 0                     ; Set false result
    JMP cmp_end_2        ; Skip true case
cmp_true_1:
    MOV R0, 1                     ; Set true result
cmp_end_2:
    MOV [FP-8], R0      ; Direct indexed access
    MOV R0, [FP-8]           ; Load condition v10
    CMP R0, 0                     ; Test condition
    JNZ for_body_1             ; Jump to true branch if non-zero
    JMP for_exit_2            ; Jump to false branch
for_body_1:
    MOV P2, [FP-4]             ; Load from v0 (16-bit)
    MOV [FP-6], P2      ; Direct indexed access
    JMP for_header_4                  ; Unconditional jump
for_increment_3:
    MOV P1, [FP-28]            ; Load current 16-bit value of v2
    ADD P1, 1                     ; Increment 16-bit
    MOV [FP-28], P1      ; Direct indexed access
    JMP for_header_0                  ; Unconditional jump
for_exit_2:
    MOV P1, 5         ; Load constant 5
    MOV [FP-20], P1      ; Direct indexed access
    MOV VL, 5         ; Set active layer
    MOV [FP-22], R0      ; Direct indexed access
    MOV P1, 90         ; Load constant 90
    MOV [FP-24], P1      ; Direct indexed access
    MOV P1, 124         ; Load constant 124
    MOV [FP-26], P1      ; Direct indexed access
    MOV P1, 31         ; Load constant 31
    MOV [FP-30], P1      ; Direct indexed access
    MOV P0, [FP-42]         ; Load string pointer from v6
    ; String pointer now in P0 (16-bit)
    MOV VX, 90             ; Set X coordinate
    MOV VY, 124             ; Set Y coordinate
    MOV R8, 31         ; Set color
    MOV VM, 0                     ; Set coordinate mode
    TEXT P0, R8                   ; Print string
    MOV [FP-32], R0      ; Direct indexed access
    CALL screen_roll          ; Call function
    MOV [FP-34], R0      ; Direct indexed access
for_header_4:
    MOV P0, [FP-6]          ; Load left operand v1 as 16-bit
    MOV P1, [FP-48]          ; Load right operand v9 as 16-bit
    CMP P0, P1                    ; Compare 16-bit operands
    JLT cmp_true_3     ; Jump if condition true
    MOV R0, 0                     ; Set false result
    JMP cmp_end_4        ; Skip true case
cmp_true_3:
    MOV R0, 1                     ; Set true result
cmp_end_4:
    MOV [FP-10], R0      ; Direct indexed access
    MOV R0, [FP-10]           ; Load condition v11
    CMP R0, 0                     ; Test condition
    JNZ for_body_5             ; Jump to true branch if non-zero
    JMP for_exit_6            ; Jump to false branch
for_body_5:
    MOV R0, [FP-6]              ; Load X from v1
    MOV VX, R0                    ; Set X coordinate
    MOV R0, [FP-28]              ; Load Y from v2
    MOV VY, R0                    ; Set Y coordinate
    MOV R0, [FP-38]          ; Load color from v4
    MOV VM, 0                     ; Set coordinate mode
    SWRITE R0                     ; Write pixel
    MOV [FP-12], R0      ; Direct indexed access
    MOV P1, [FP-38]            ; Load current 16-bit value of v4
    ADD P1, 1                     ; Increment 16-bit
    MOV [FP-38], P1      ; Direct indexed access
    JMP for_increment_7                  ; Unconditional jump
for_increment_7:
    MOV P1, [FP-6]            ; Load current 16-bit value of v1
    ADD P1, 1                     ; Increment 16-bit
    MOV [FP-6], P1      ; Direct indexed access
    JMP for_header_4                  ; Unconditional jump
for_exit_6:
    MOV P1, [FP-36]            ; Load current 16-bit value of v3
    ADD P1, 1                     ; Increment 16-bit
    MOV [FP-36], P1      ; Direct indexed access
    MOV P1, 4         ; Load constant 4
    MOV [FP-14], P1      ; Direct indexed access
    MOV P0, [FP-36]          ; Load left operand v3 as 16-bit
    MOV P1, [FP-14]          ; Load right operand v13 as 16-bit
    CMP P0, P1                    ; Compare 16-bit operands
    JZ cmp_true_5     ; Jump if condition true
    MOV R0, 0                     ; Set false result
    JMP cmp_end_6        ; Skip true case
cmp_true_5:
    MOV R0, 1                     ; Set true result
cmp_end_6:
    MOV [FP-16], R0      ; Direct indexed access
    MOV R0, [FP-16]           ; Load condition v14
    CMP R0, 0                     ; Test condition
    JNZ if_then_8             ; Jump to true branch if non-zero
    JMP if_merge_10            ; Jump to false branch
if_then_8:
    MOV P2, [FP-4]             ; Load from v0 (16-bit)
    MOV [FP-36], P2      ; Direct indexed access
    MOV R0, 1        ; Set roll amount
    SROLX R0                      ; Roll screen horizontally
    MOV [FP-18], R0      ; Direct indexed access
    JMP if_merge_10                  ; Unconditional jump
if_merge_10:
    JMP for_increment_3                  ; Unconditional jump
    ; Halt processor
    MOV SP, FP                    ; Restore stack pointer
    HLT                           ; Halt system

screen_roll:
    PUSH FP                       ; Save caller's frame pointer
    MOV FP, SP                    ; Set new frame pointer
    SUB SP, 16      ; Allocate 16 bytes for locals
    MOV P1, 0         ; Load constant 0
    MOV [FP-4], P1      ; Direct indexed access
    MOV P2, [FP-4]             ; Load from v23 (16-bit)
    MOV [FP-6], P2      ; Direct indexed access
    MOV P1, 1         ; Load constant 1
    MOV [FP-8], P1      ; Direct indexed access
    MOV VL, 1         ; Set active layer
    MOV [FP-10], R0      ; Direct indexed access
    MOV P2, [FP-4]             ; Load from v23 (16-bit)
    MOV [FP-6], P2      ; Direct indexed access
    JMP for_header_11                  ; Unconditional jump
for_header_11:
    MOV P1, 256         ; Load constant 256
    MOV [FP-12], P1      ; Direct indexed access
    MOV P0, [FP-6]          ; Load left operand v24 as 16-bit
    MOV P1, [FP-12]          ; Load right operand v27 as 16-bit
    CMP P0, P1                    ; Compare 16-bit operands
    JLT cmp_true_7     ; Jump if condition true
    MOV R0, 0                     ; Set false result
    JMP cmp_end_8        ; Skip true case
cmp_true_7:
    MOV R0, 1                     ; Set true result
cmp_end_8:
    MOV [FP-14], R0      ; Direct indexed access
    MOV R0, [FP-14]           ; Load condition v28
    CMP R0, 0                     ; Test condition
    JNZ for_body_12             ; Jump to true branch if non-zero
    JMP for_exit_13            ; Jump to false branch
for_body_12:
    MOV R0, 1        ; Set roll amount
    SROLX R0                      ; Roll screen horizontally
    MOV [FP-16], R0      ; Direct indexed access
    JMP for_increment_14                  ; Unconditional jump
for_increment_14:
    MOV P1, [FP-6]            ; Load current 16-bit value of v24
    ADD P1, 1                     ; Increment 16-bit
    MOV [FP-6], P1      ; Direct indexed access
    JMP for_header_11                  ; Unconditional jump
for_exit_13:
    ; Implicit return for void function
    MOV SP, FP                    ; Restore stack pointer
    POP FP                        ; Restore caller's frame pointer
    RET                           ; Return to caller

; String constants data section

str_1: DEFSTR "De Nova Stella"
