; Generated by Astrid Pure Stack-Centric Compiler
; Architecture: Nova-16 with pure stack-first approach
; Variables stored on stack, minimal register usage
; Stack Layout: [locals][FP][return_addr][params]

main:
    MOV SP, 0xF000                ; Initialize stack pointer to safe area
    MOV FP, SP                    ; Initialize frame pointer for main
    SUB SP, 42      ; Allocate 42 bytes for locals
    MOV P1, 25         ; Load constant 25
    MOV [FP-4], P1      ; Direct indexed access
    MOV P2, [FP-4]             ; Load from v0 (16-bit)
    MOV [FP-6], P2      ; Direct indexed access
    MOV P1, 50         ; Load constant 50
    MOV [FP-28], P1      ; Direct indexed access
    MOV P2, [FP-28]             ; Load from v2 (16-bit)
    MOV [FP-30], P2      ; Direct indexed access
    MOV P1, 0         ; Load constant 0
    MOV [FP-32], P1      ; Direct indexed access
    MOV P2, [FP-32]             ; Load from v4 (16-bit)
    MOV [FP-34], P2      ; Direct indexed access
    JMP for_header_0                  ; Unconditional jump
for_header_0:
    MOV P1, 3         ; Load constant 3
    MOV [FP-36], P1      ; Direct indexed access
    MOV P0, [FP-34]          ; Load left operand v5 as 16-bit
    MOV P1, [FP-36]          ; Load right operand v6 as 16-bit
    CMP P0, P1                    ; Compare 16-bit operands
    JLT cmp_true_1     ; Jump if condition true
    MOV R0, 0                     ; Set false result
    JMP cmp_end_2        ; Skip true case
cmp_true_1:
    MOV R0, 1                     ; Set true result
cmp_end_2:
    MOV [FP-38], R0      ; Direct indexed access
    MOV R0, [FP-38]           ; Load condition v7
    CMP R0, 0                     ; Test condition
    JNZ for_body_1             ; Jump to true branch if non-zero
    JMP for_exit_2            ; Jump to false branch
for_body_1:
    MOV P1, 1         ; Load constant 1
    MOV [FP-40], P1      ; Direct indexed access
    MOV VL, 1         ; Set active layer
    MOV [FP-42], R0      ; Direct indexed access
    MOV P1, 10         ; Load constant 10
    MOV [FP-8], P1      ; Direct indexed access
    MOV R0, [FP-34]           ; Load left operand v5
    MOV R1, [FP-8]          ; Load right operand v10
    MUL R0, R1               ; * operands
    MOV [FP-10], R0      ; Direct indexed access
    MOV R0, [FP-6]           ; Load left operand v1
    MOV R1, [FP-10]          ; Load right operand v11
    ADD R0, R1               ; + operands
    MOV [FP-12], R0      ; Direct indexed access
    MOV P1, 31         ; Load constant 31
    MOV [FP-14], P1      ; Direct indexed access
    MOV R0, [FP-12]              ; Load X from v12
    MOV VX, R0                    ; Set X coordinate
    MOV R0, [FP-30]              ; Load Y from v3
    MOV VY, R0                    ; Set Y coordinate
    MOV R0, 31         ; Load color constant
    MOV VM, 0                     ; Set coordinate mode
    SWRITE R0                     ; Write pixel
    MOV [FP-16], R0      ; Direct indexed access
    JMP for_increment_3                  ; Unconditional jump
for_increment_3:
    MOV P1, [FP-34]            ; Load current 16-bit value of v5
    ADD P1, 1                     ; Increment 16-bit
    MOV [FP-34], P1      ; Direct indexed access
    JMP for_header_0                  ; Unconditional jump
for_exit_2:
    MOV R0, [FP-6]           ; Load left operand v1
    MOV R1, [FP-30]          ; Load right operand v3
    ADD R0, R1               ; + operands
    MOV [FP-18], R0      ; Direct indexed access
    MOV P2, [FP-18]             ; Load from v15 (16-bit)
    MOV [FP-20], P2      ; Direct indexed access
    MOV P1, 100         ; Load constant 100
    MOV [FP-22], P1      ; Direct indexed access
    MOV P1, 15         ; Load constant 15
    MOV [FP-24], P1      ; Direct indexed access
    MOV R0, [FP-20]              ; Load X from v16
    MOV VX, R0                    ; Set X coordinate
    MOV VY, 100             ; Set Y coordinate
    MOV R0, 15         ; Load color constant
    MOV VM, 0                     ; Set coordinate mode
    SWRITE R0                     ; Write pixel
    MOV [FP-26], R0      ; Direct indexed access
    ; Halt processor
    MOV SP, FP                    ; Restore stack pointer
    HLT                           ; Halt system
