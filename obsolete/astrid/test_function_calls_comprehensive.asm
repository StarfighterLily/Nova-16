; Generated by Astrid Pure Stack-Centric Compiler
; Architecture: Nova-16 with pure stack-first approach
; Variables stored on stack, minimal register usage
; Stack Layout: [locals][FP][return_addr][params]

simple_function:
    PUSH FP                       ; Save caller's frame pointer
    MOV FP, SP                    ; Set new frame pointer
    SUB SP, 6      ; Allocate 6 bytes for locals
    MOV R0, 10         ; Load constant 10
    MOV R0, [FP-4]      ; Direct indexed access
    MOV P2, [FP-4]             ; Load from v0 (16-bit)
    MOV P2, [FP-6]      ; Direct indexed access
    ; Implicit return for void function
    MOV SP, FP                    ; Restore stack pointer
    POP FP                        ; Restore caller's frame pointer
    RET                           ; Return to caller

get_constant:
    PUSH FP                       ; Save caller's frame pointer
    MOV FP, SP                    ; Set new frame pointer
    SUB SP, 4      ; Allocate 4 bytes for locals
    MOV R0, 42         ; Load constant 42
    MOV R0, [FP-4]      ; Direct indexed access
    MOV R0, [FP-4]            ; Load return value v2
    MOV SP, FP                    ; Restore stack pointer
    POP FP                        ; Restore caller's frame pointer
    RET                           ; Return to caller
    ; Implicit return for void function
    MOV SP, FP                    ; Restore stack pointer
    POP FP                        ; Restore caller's frame pointer
    RET                           ; Return to caller

set_value:
    PUSH FP                       ; Save caller's frame pointer
    MOV FP, SP                    ; Set new frame pointer
    SUB SP, 4      ; Allocate 4 bytes for locals
    MOV P2, [FP+4]             ; Load from v3 (16-bit)
    MOV P2, [FP-4]      ; Direct indexed access
    ; Implicit return for void function
    MOV SP, FP                    ; Restore stack pointer
    POP FP                        ; Restore caller's frame pointer
    RET                           ; Return to caller

add_numbers:
    PUSH FP                       ; Save caller's frame pointer
    MOV FP, SP                    ; Set new frame pointer
    SUB SP, 6      ; Allocate 6 bytes for locals
    MOV R0, [FP+4]           ; Load left operand v5
    MOV R1, [FP+6]          ; Load right operand v6
    ADD R0, R1               ; + operands
    MOV R0, [FP-4]      ; Direct indexed access
    MOV P2, [FP-4]             ; Load from v7 (16-bit)
    MOV P2, [FP-6]      ; Direct indexed access
    MOV R0, [FP-6]            ; Load return value v8
    MOV SP, FP                    ; Restore stack pointer
    POP FP                        ; Restore caller's frame pointer
    RET                           ; Return to caller
    ; Implicit return for void function
    MOV SP, FP                    ; Restore stack pointer
    POP FP                        ; Restore caller's frame pointer
    RET                           ; Return to caller

mix_types:
    PUSH FP                       ; Save caller's frame pointer
    MOV FP, SP                    ; Set new frame pointer
    SUB SP, 6      ; Allocate 6 bytes for locals
    MOV P2, [FP+4]             ; Load from v9 (16-bit)
    MOV P2, [FP-4]      ; Direct indexed access
    MOV P2, [FP+6]             ; Load from v10 (16-bit)
    MOV P2, [FP-6]      ; Direct indexed access
    ; Implicit return for void function
    MOV SP, FP                    ; Restore stack pointer
    POP FP                        ; Restore caller's frame pointer
    RET                           ; Return to caller

complex_calculation:
    PUSH FP                       ; Save caller's frame pointer
    MOV FP, SP                    ; Set new frame pointer
    SUB SP, 14      ; Allocate 14 bytes for locals
    CALL get_constant          ; Call function
    MOV R0, [FP-4]      ; Direct indexed access
    MOV P2, [FP-4]             ; Load from v15 (16-bit)
    MOV P2, [FP-6]      ; Direct indexed access
    MOV R0, [FP+6]          ; Load parameter v14
    PUSH R0                       ; Push parameter to stack
    MOV R0, [FP+4]          ; Load parameter v13
    PUSH R0                       ; Push parameter to stack
    CALL add_numbers          ; Call function
    ADD SP, 4         ; Clean up 2 parameters
    MOV R0, [FP-8]      ; Direct indexed access
    MOV P2, [FP-8]             ; Load from v17 (16-bit)
    MOV P2, [FP-10]      ; Direct indexed access
    MOV R0, [FP-10]           ; Load left operand v18
    MOV R1, [FP-6]          ; Load right operand v16
    ADD R0, R1               ; + operands
    MOV R0, [FP-12]      ; Direct indexed access
    MOV P2, [FP-12]             ; Load from v19 (16-bit)
    MOV P2, [FP-14]      ; Direct indexed access
    MOV R0, [FP-14]            ; Load return value v20
    MOV SP, FP                    ; Restore stack pointer
    POP FP                        ; Restore caller's frame pointer
    RET                           ; Return to caller
    ; Implicit return for void function
    MOV SP, FP                    ; Restore stack pointer
    POP FP                        ; Restore caller's frame pointer
    RET                           ; Return to caller

factorial:
    PUSH FP                       ; Save caller's frame pointer
    MOV FP, SP                    ; Set new frame pointer
    SUB SP, 12      ; Allocate 12 bytes for locals
    MOV R0, 1         ; Load constant 1
    MOV R0, [FP-4]      ; Direct indexed access
    MOV P0, [P1]                 ; Load left operand v21 as 16-bit
    MOV P1, [P2]                  ; Load right operand v22 as 16-bit
    CMP P0, P1                    ; Compare 16-bit operands
    JLE cmp_true_1     ; Jump if condition true
    MOV R0, 0                     ; Set false result
    JMP cmp_end_2        ; Skip true case
cmp_true_1:
    MOV R0, 1                     ; Set true result
cmp_end_2:
    MOV R0, [FP-6]      ; Direct indexed access
    MOV R0, [FP-6]           ; Load condition v23
    CMP R0, 0                     ; Test condition
    JNZ if_then_0             ; Jump to true branch if non-zero
    JMP if_merge_2            ; Jump to false branch
if_then_0:
    MOV R0, [FP-4]            ; Load return value v22
    MOV SP, FP                    ; Restore stack pointer
    POP FP                        ; Restore caller's frame pointer
    RET                           ; Return to caller
    JMP if_merge_2                  ; Unconditional jump
if_merge_2:
    MOV R0, [FP+4]           ; Load left operand v21
    MOV R1, [FP-4]          ; Load right operand v22
    SUB R0, R1               ; - operands
    MOV R0, [FP-8]      ; Direct indexed access
    MOV R0, [FP-8]          ; Load parameter v24
    PUSH R0                       ; Push parameter to stack
    CALL factorial          ; Call function
    ADD SP, 2         ; Clean up 1 parameters
    MOV R0, [FP-10]      ; Direct indexed access
    MOV R0, [FP+4]           ; Load left operand v21
    MOV R1, [FP-10]          ; Load right operand v25
    MUL R0, R1               ; * operands
    MOV R0, [FP-12]      ; Direct indexed access
    MOV R0, [FP-12]            ; Load return value v26
    MOV SP, FP                    ; Restore stack pointer
    POP FP                        ; Restore caller's frame pointer
    RET                           ; Return to caller
    ; Implicit return for void function
    MOV SP, FP                    ; Restore stack pointer
    POP FP                        ; Restore caller's frame pointer
    RET                           ; Return to caller

main:
    MOV SP, 0xF000                ; Initialize stack pointer to safe area
    MOV FP, SP                    ; Initialize frame pointer for main
    SUB SP, 52      ; Allocate 52 bytes for locals
    CALL simple_function          ; Call function
    MOV R0, [FP-4]      ; Direct indexed access
    CALL get_constant          ; Call function
    MOV R0, [FP-6]      ; Direct indexed access
    MOV P2, [FP-6]             ; Load from v28 (16-bit)
    MOV P2, [FP-8]      ; Direct indexed access
    MOV R0, 25         ; Load constant 25
    MOV R0, [FP-10]      ; Direct indexed access
    MOV R0, [FP-10]          ; Load parameter v30
    PUSH R0                       ; Push parameter to stack
    CALL set_value          ; Call function
    ADD SP, 2         ; Clean up 1 parameters
    MOV R0, [FP-12]      ; Direct indexed access
    MOV R0, 10         ; Load constant 10
    MOV R0, [FP-14]      ; Direct indexed access
    MOV R0, 20         ; Load constant 20
    MOV R0, [FP-16]      ; Direct indexed access
    MOV R0, [FP-16]          ; Load parameter v33
    PUSH R0                       ; Push parameter to stack
    MOV R0, [FP-14]          ; Load parameter v32
    PUSH R0                       ; Push parameter to stack
    CALL add_numbers          ; Call function
    ADD SP, 4         ; Clean up 2 parameters
    MOV R0, [FP-18]      ; Direct indexed access
    MOV P2, [FP-18]             ; Load from v34 (16-bit)
    MOV P2, [FP-20]      ; Direct indexed access
    MOV R0, 5         ; Load constant 5
    MOV R0, [FP-22]      ; Direct indexed access
    MOV P1, 1000         ; Load 16-bit constant 1000
    MOV P1, [FP-24]      ; Direct indexed access
    MOV R0, [FP-24]          ; Load parameter v37
    PUSH R0                       ; Push parameter to stack
    MOV R0, [FP-22]          ; Load parameter v36
    PUSH R0                       ; Push parameter to stack
    CALL mix_types          ; Call function
    ADD SP, 4         ; Clean up 2 parameters
    MOV R0, [FP-26]      ; Direct indexed access
    MOV R0, 15         ; Load constant 15
    MOV R0, [FP-28]      ; Direct indexed access
    MOV R0, [FP-10]          ; Load parameter v30
    PUSH R0                       ; Push parameter to stack
    MOV R0, [FP-28]          ; Load parameter v39
    PUSH R0                       ; Push parameter to stack
    CALL complex_calculation          ; Call function
    ADD SP, 4         ; Clean up 2 parameters
    MOV R0, [FP-30]      ; Direct indexed access
    MOV P2, [FP-30]             ; Load from v40 (16-bit)
    MOV P2, [FP-32]      ; Direct indexed access
    MOV R0, 4         ; Load constant 4
    MOV R0, [FP-34]      ; Direct indexed access
    MOV R0, [FP-34]          ; Load parameter v42
    PUSH R0                       ; Push parameter to stack
    CALL factorial          ; Call function
    ADD SP, 2         ; Clean up 1 parameters
    MOV R0, [FP-36]      ; Direct indexed access
    MOV P2, [FP-36]             ; Load from v43 (16-bit)
    MOV P2, [FP-38]      ; Direct indexed access
    MOV R0, 7         ; Load constant 7
    MOV R0, [FP-40]      ; Direct indexed access
    MOV P2, [FP-40]             ; Load from v45 (16-bit)
    MOV P2, [FP-42]      ; Direct indexed access
    MOV R0, 13         ; Load constant 13
    MOV R0, [FP-44]      ; Direct indexed access
    MOV P2, [FP-44]             ; Load from v47 (16-bit)
    MOV P2, [FP-46]      ; Direct indexed access
    MOV R0, [FP-46]          ; Load parameter v48
    PUSH R0                       ; Push parameter to stack
    MOV R0, [FP-42]          ; Load parameter v46
    PUSH R0                       ; Push parameter to stack
    CALL add_numbers          ; Call function
    ADD SP, 4         ; Clean up 2 parameters
    MOV R0, [FP-48]      ; Direct indexed access
    MOV P2, [FP-48]             ; Load from v49 (16-bit)
    MOV P2, [FP-50]      ; Direct indexed access
    HLT                           ; Halt system
    ; Halt processor
    MOV SP, FP                    ; Restore stack pointer
    HLT                           ; Halt system
